@startuml class diagram
class Ball {
    - velocity: Vector
    + Ball(paddle: Paddle, dx: int, dy: int, color: Color, radius: int)
    + void: place_on_paddle(Paddle)
    + void: draw(SurfaceType)
    + void: update(speed: int)
    + Brick | None: bounce(screen_width: int, bricks: list[Brick], Paddle)
    + bool: is_on_paddle()
    + void: shoot()
}
class Brick {
    - color: Color
    + velocity: Vector
    + Brick(x: int, y: int, width: int, height: int, color: Color)
    + void: draw(SurfaceType)
    + void: update(speed: int)
}

class Game {
    - score: int
    - lives: int
    - font: Font
    - screen: SurfaceType
    - paddle: Brick
    - ball: Ball
    - bricks: Bricks
    + Game(width: int, height: int)
    + void: reset_bricks()
    + void: draw_text(text:string, pos: list[int,int])
    + void: run_game()
    + void: draw()
    + void: handle_events()
    + void: update()
}
class Color {
    - red: int
    - green: int
    - blue: int
    + Color(string)
    + Color(int,int,int)
    + tuple[int, int, int] : to_tuple()
}
class Vector {
    + x: float
    + y: float
}
class Bricks {
    + void: reset_bricks()
}

python.list <|-- Bricks
Brick *-- Bricks
pygame.Rect <|-- Brick
Color *-- Brick
Vector *-- Brick
Brick <|-- Ball
Ball *-- Game
Brick *-- Game
Bricks *-- Game
@enduml